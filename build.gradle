plugins {
    id("org.jetbrains.kotlin.jvm") version "1.5.20"
    id("org.jetbrains.kotlin.kapt") version "1.5.20"
    id("com.github.johnrengelman.shadow") version "7.0.0"
    id("io.micronaut.application") version "2.0.2"
    id("org.jetbrains.kotlin.plugin.allopen") version "${kotlinVersion}"
    id("org.jetbrains.kotlin.plugin.jpa") version "${kotlinVersion}"
    // dependencyUpdates Task zum Prüfen auf neue Versionen
    id 'com.github.ben-manes.versions' version '0.39.0'
}

version = "0.1"
group = "de.impro"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("de.impro.*")
    }
}

dependencies {
    kapt("io.micronaut.data:micronaut-data-processor")
    kapt("io.micronaut.openapi:micronaut-openapi")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-session")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.views:micronaut-views-thymeleaf")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut.cache:micronaut-cache-core")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    runtimeOnly("com.h2database:h2")
    runtimeOnly("org.postgresql:postgresql")
    runtimeOnly("org.slf4j:slf4j-simple")
    testImplementation("org.assertj:assertj-core")
    implementation("io.micronaut:micronaut-validation")

    implementation("io.micronaut.sql:micronaut-vertx-pg-client")

    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")

}


application {
    mainClass.set("de.impro.ApplicationKt")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }


}

// Keine Alphas, Betas oder Release-Candidates für dependencyUpdates in betracht ziehen
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    // jre for guava
    def regex = /^[0-9,.v-]+(-(r|jre))?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

run {
    systemProperty('micronaut.environments','dev')
}


task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean


